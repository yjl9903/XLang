(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{426:function(_,v,e){"use strict";e.r(v);var t=e(56),a=Object(t.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h2",{attrs:{id:"正则表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[_._v("#")]),_._v(" 正则表达式")]),_._v(" "),e("p",[_._v("XLex 实现了一个简易的正则表达式。")]),_._v(" "),e("h2",{attrs:{id:"语法规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法规则"}},[_._v("#")]),_._v(" 语法规则")]),_._v(" "),e("p",[_._v("正则表达式由所有可显示的 ASCII 码字符，和一些运算符组成。")]),_._v(" "),e("p",[_._v("初始时，匹配的字符串为空串。")]),_._v(" "),e("p",[_._v("合法的运算符包括：")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("连接：将一个正则表达式和一个字符进行连接，例如 "),e("code",[_._v("Sa")]),_._v("，表示正则表达式 "),e("code",[_._v("S")]),_._v(" 后面必须匹配小写英文 "),e("code",[_._v("a")]),_._v("；")])]),_._v(" "),e("li",[e("p",[_._v("或：匹配两个正则表达式中的一个，例如 "),e("code",[_._v("S|T")]),_._v("，表示字符串必须匹配正则表达式 "),e("code",[_._v("S")]),_._v(" 或者正则表达式 "),e("code",[_._v("T")]),_._v("；")])]),_._v(" "),e("li",[e("p",[_._v("闭包："),e("code",[_._v("S*")]),_._v("，表示匹配零个或多个正则表达式 "),e("code",[_._v("S")]),_._v("；")])]),_._v(" "),e("li",[e("p",[_._v("正闭包："),e("code",[_._v("S+")]),_._v("，类似于闭包，但是至少匹配一次 "),e("code",[_._v("S")]),_._v("；")])]),_._v(" "),e("li",[e("p",[_._v("可选："),e("code",[_._v("S?")]),_._v("，表示匹配零个或一个正则表达式 "),e("code",[_._v("S")]),_._v("；")])]),_._v(" "),e("li",[e("p",[_._v("括号："),e("code",[_._v("(S)")]),_._v("，用于改变运算符优先级；")])]),_._v(" "),e("li",[e("p",[_._v("范围选择："),e("code",[_._v("[...]")]),_._v("，用一对方括号包裹起来，用于匹配一个内部的所有字符。例如，"),e("code",[_._v("[abc]")]),_._v(" 表示匹配小写英文字母 "),e("code",[_._v("a")]),_._v(" 或 "),e("code",[_._v("b")]),_._v(" 或 "),e("code",[_._v("c")]),_._v("；例如，"),e("code",[_._v("[a-z0-9]")]),_._v(" 表示匹配一个所有小写英文字母或者数字。")])])]),_._v(" "),e("p",[_._v("范围选择和括号的优先级最高，其次是闭包和正闭包和可选，再其次是连接，或的优先级最低。")]),_._v(" "),e("h2",{attrs:{id:"ll-1-文法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ll-1-文法"}},[_._v("#")]),_._v(" LL(1) 文法")]),_._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("EXPR -> TERM EXPR_REST\nEXPR_REST -> ε\nEXPR_REST -> | EXPR\n\nTERM -> TERM TERM_REST\nTERM_REST -> ε\nTERM_REST -> TERM\n\nTERM -> FACTOR TERM_SUFFIX\nTERM_SUFFIX -> ε\nTERM_SUFFIX -> *\nTERM_SUFFIX -> +\nTERM_SUFFIX -> ?\n\nFACTOR -> &lt;ASCII 码字符>\nFACTOR -> [ RANGE ]\nFACTOR -> ( EXPR )\nFACTOR -> \\ &lt;转义字符>\n\nRANGE -> RANGE_ITEM RANGE_REST\nRANGE_REST -> ε\nRANGE_REST -> RANGE\nRANGE_ITEM -> &lt;ASCII 码字符> RANGE_ITEM_REST\nRANGE_ITEM_REST -> ε\nRANGE_ITEM_REST -> - &lt;ASCII 码字符>\n")])])]),e("p",[_._v("XLex 使用一个递归下降分析器解析正则表达式，具体实现为 "),e("a",{attrs:{href:"https://github.com/LonelyKuma/XLex/blob/master/src/reg/parser.ts",target:"_blank",rel:"noopener noreferrer"}},[_._v("parser.ts"),e("OutboundLink")],1),_._v("。")])])}),[],!1,null,null,null);v.default=a.exports}}]);