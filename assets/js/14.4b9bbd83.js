(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{420:function(a,t,e){"use strict";e.r(t);var r=e(56),n=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[a._v("#")]),a._v(" 介绍")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yjl9903/XLang",target:"_blank",rel:"noopener noreferrer"}},[a._v("XLang"),e("OutboundLink")],1),a._v(" 是一个简单但是足够强大的编程语言，它由词法分析器 "),e("a",{attrs:{href:"https://github.com/LonelyKuma/XLex",target:"_blank",rel:"noopener noreferrer"}},[a._v("XLex"),e("OutboundLink")],1),a._v(" 和语法分析器 "),e("a",{attrs:{href:"https://github.com/LonelyKuma/XParse",target:"_blank",rel:"noopener noreferrer"}},[a._v("XParse"),e("OutboundLink")],1),a._v(" 驱动。")]),a._v(" "),e("p",[a._v("XLang 使用了一个由 TypeScript 编写的虚拟机来执行其代码，你可以下载并安装其命令行工具在本地编译和运行你的代码。")]),a._v(" "),e("p",[a._v("XLang 提供了一个在线"),e("a",{attrs:{href:"https://xlang.netlify.app/",target:"_blank",rel:"noopener noreferrer"}},[a._v("实验场"),e("OutboundLink")],1),a._v("，你可以在上面尝试使用 XLang，XLex 和 XParse。")]),a._v(" "),e("h2",{attrs:{id:"全局安装命令行工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局安装命令行工具"}},[a._v("#")]),a._v(" 全局安装命令行工具")]),a._v(" "),e("p",[a._v("确保你已经安装并配置 "),e("a",{attrs:{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Node.js 环境"),e("OutboundLink")],1),a._v("，推荐使用最新的版本的 Node.js。")]),a._v(" "),e("p",[a._v("在终端中输入以下命令，即可安装 XParse。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" -g @xlor/xlang\n")])])]),e("p",[a._v("输入以下命令，确认 XLang 已经成功安装。")]),a._v(" "),e("div",{staticClass:"language-base extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("xlang --version\n")])])]),e("h2",{attrs:{id:"在-javascript-项目中引入-xlang"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-javascript-项目中引入-xlang"}},[a._v("#")]),a._v(" 在 JavaScript 项目中引入 XLang")]),a._v(" "),e("p",[a._v("XLang 的核心代码只依赖于 JavaScript 核心代码库，不依赖于特定的运行环境。")]),a._v(" "),e("p",[a._v("在你的项目根目录下，输入以下命令，即可引入 XLang。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" @xlor/xlang\n")])])]),e("h2",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),e("p",[a._v("XLang 使用 XLex 作为词法分析器，得到 Token 流后，输入进语法分析器 XParse 中，XParse 解析 Token 流的语法结构，并使用综合属性维护出代码的抽象语法树。在抽象语法树上进行遍历，维护作用域符号表，当前编译的函数等信息。XLang 设计了一个简单的"),e("a",{attrs:{href:"/xlang/deep"}},[a._v("三地址码")]),a._v("中间表示，在遍历抽象语法树时，进行代码生成的工作。")]),a._v(" "),e("p",[a._v("XLang 实现的虚拟机可以执行生成的三地址码。虚拟机在执行时，维护了当前要执行的三地址码位置，全局变量，函数调用栈，存储局部变量的栈，实现了 XLang 代码的模拟执行。虚拟机还绑定了一些由 JavaScript 编写的"),e("a",{attrs:{href:"/xlang/fn"}},[a._v("内置函数")]),a._v("，也允许你通过命令行程序导入自己编写 JavaScript 模块，提供接口给 XLang 调用。")])])}),[],!1,null,null,null);t.default=n.exports}}]);