(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{421:function(v,_,e){"use strict";e.r(_);var t=e(56),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"抽象语法树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽象语法树"}},[v._v("#")]),v._v(" 抽象语法树")]),v._v(" "),e("p",[v._v("在使用 XParse 进行 LR 分析时，通过计算综合属性的方式求出抽象语法树。")]),v._v(" "),e("p",[v._v("使用一个类 "),e("code",[v._v("BasicASTNode")]),v._v(" 定义了抽象语法树结点的基类，拥有虚函数 "),e("code",[v._v("visit(context: Context): NodeVisitorReturn")]),v._v("。")]),v._v(" "),e("p",[v._v("有具体抽象语法树结点：")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("RootASTNode")]),v._v("：程序根结点；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("FunctionASTNode")]),v._v("：函数定义结点；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("StatementListASTNode")]),v._v("：程序语句列表结点；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("IfStatementASTNode")]),v._v("："),e("code",[v._v("if")]),v._v(" 语句结点；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("WhileStatementASTNode")]),v._v("："),e("code",[v._v("while")]),v._v(" 语句结点；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("ForStatementASTNode")]),v._v("："),e("code",[v._v("for")]),v._v(" 语句结点；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("DefineListASTNode")]),v._v("：变量声明语句列表结点；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("DefineASTNode")]),v._v("：变量声明；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("ArgDefineListASTNode")]),v._v("：函数参数列表结点；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("LeafASTNode")]),v._v("：具体变量或常量值结点；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("BinOPASTNode")]),v._v("：二元操作符结点；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("UnitOPASTNode")]),v._v("：一元操作符结点。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("FunctionCallASTNode")]),v._v("：函数调用语句结点；")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("FunctionReturnASTNode")]),v._v("：函数返回语句结点。")])])]),v._v(" "),e("p",[v._v("这些结点均实现了在遍历抽象语法树的递归访问函数 "),e("code",[v._v("visit(context: Context): NodeVisitorReturn")]),v._v("，其中 "),e("code",[v._v("context")]),v._v(" 包含当前访问位置的上下文信息，包含符号表，全局函数和当前编译的函数。")]),v._v(" "),e("p",[v._v("为了实现作用域的切换，符号表形成了一个链表的结构，每个作用域的符号表有一个指针指向上层符号表，每个符号表使用一个哈希表实现。在查询具体符号时，会在当前作用域中的哈希表查找，若找不到会继续在上层递归查找。符号表的具体实现见 "),e("a",{attrs:{href:"https://github.com/yjl9903/XLang/blob/master/src/xlang/symbolTable.ts",target:"_blank",rel:"noopener noreferrer"}},[v._v("symbolTable.ts"),e("OutboundLink")],1),v._v("。")]),v._v(" "),e("p",[v._v("访问函数都会返回一个对象，包含两个属性。"),e("code",[v._v("code")]),v._v(" 属性存放当前结点生成出来的代码，"),e("code",[v._v("dst")]),v._v(" 属性存放这个结点返回值的变量或常量信息，包含它的类型，内存相对地址等信息。")]),v._v(" "),e("h2",{attrs:{id:"三地址码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三地址码"}},[v._v("#")]),v._v(" 三地址码")]),v._v(" "),e("p",[v._v("XLang 的三地址码支持以下指令：")]),v._v(" "),e("p",[e("code",[v._v("NOP")]),v._v("，"),e("code",[v._v("FunctionCall")]),v._v("，"),e("code",[v._v("FunctionReturn")]),v._v("，"),e("code",[v._v("PushStack")]),v._v("，"),e("code",[v._v("Goto")]),v._v("，"),e("code",[v._v("IfGoto")]),v._v("，"),e("code",[v._v("Plus")]),v._v("，"),e("code",[v._v("Minus")]),v._v("，"),e("code",[v._v("Mul")]),v._v("，"),e("code",[v._v("Div")]),v._v("，"),e("code",[v._v("Mod")]),v._v("，"),e("code",[v._v("Negative")]),v._v("，"),e("code",[v._v("Not")]),v._v("，"),e("code",[v._v("And")]),v._v("，"),e("code",[v._v("Or")]),v._v("，"),e("code",[v._v("NotEqual")]),v._v("，"),e("code",[v._v("Equal")]),v._v("，"),e("code",[v._v("LessThan")]),v._v("，"),e("code",[v._v("MoreThan")]),v._v("，"),e("code",[v._v("LessOrEqual")]),v._v("，"),e("code",[v._v("MoreOrEqual")]),v._v("，"),e("code",[v._v("Assign")]),v._v("。")]),v._v(" "),e("p",[v._v("更详细和完整的三地址码类型定义见 "),e("a",{attrs:{href:"https://github.com/yjl9903/XLang/blob/master/src/xlang/tac.ts",target:"_blank",rel:"noopener noreferrer"}},[v._v("tac.ts"),e("OutboundLink")],1),v._v("，以及类型推断的定义。")]),v._v(" "),e("p",[v._v("这些三地址码指令可以分为 "),e("mjx-container",{staticClass:"MathJax",attrs:{jax:"SVG"}},[e("svg",{staticStyle:{"vertical-align":"-0.05ex"},attrs:{xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.557ex",viewBox:"0 -666 500 688"}},[e("g",{attrs:{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"matrix(1 0 0 -1 0 0)"}},[e("g",{attrs:{"data-mml-node":"math"}},[e("g",{attrs:{"data-mml-node":"mn"}},[e("path",{attrs:{"data-c":"35",d:"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"}})])])])])]),v._v(" 类。")],1),v._v(" "),e("ul",[e("li",[e("p",[v._v("函数调用相关："),e("code",[v._v("FunctionCall")]),v._v("，"),e("code",[v._v("FunctionReturn")]),v._v(" 处理函数调用，"),e("code",[v._v("PushStack")]),v._v(" 处理函数参数的传递；")])]),v._v(" "),e("li",[e("p",[v._v("控制流跳转："),e("code",[v._v("Goto")]),v._v("，"),e("code",[v._v("IfGoto")]),v._v("；")])]),v._v(" "),e("li",[e("p",[v._v("数值计算相关："),e("code",[v._v("Plus")]),v._v("，"),e("code",[v._v("Minus")]),v._v(" 等；")])]),v._v(" "),e("li",[e("p",[v._v("内存赋值："),e("code",[v._v("Assign")]),v._v("；")])]),v._v(" "),e("li",[e("p",[v._v("空操作："),e("code",[v._v("NOP")]),v._v("。")])])]),v._v(" "),e("h2",{attrs:{id:"虚拟机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机"}},[v._v("#")]),v._v(" 虚拟机")]),v._v(" "),e("p",[v._v("虚拟机维护了当前要执行的三地址码位置，全局变量，函数调用栈，存储局部变量的栈。")]),v._v(" "),e("p",[v._v("在函数调用的过程中，维护了函数的调用栈，包含上层函数的现场信息（栈指针，程序指令指针，调用函数名等），还维护了局部变量的内存栈（如下图所示）。")]),v._v(" "),e("center",[e("img",{attrs:{src:"/stack.png",alt:"stack"}})]),v._v(" "),e("p",[v._v("栈指针指向了当前函数调用的局部变量最低地址，而栈指针前存放的是调用这个函数传进来的实际参数。")]),v._v(" "),e("p",[v._v("在函数调用前，使用 "),e("code",[v._v("PushStack")]),v._v(" 指令将参数传入调用函数。")]),v._v(" "),e("p",[v._v("对于控制流指令，使用相对地址进行跳转。")])],1)}),[],!1,null,null,null);_.default=o.exports}}]);